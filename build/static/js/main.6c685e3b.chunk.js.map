{"version":3,"sources":["serviceWorker.js","Components/Navbar.js","Components/Login.js","App.js","Components/Chat.js","index.js","Routes/index.js"],"names":["Boolean","window","location","hostname","match","Components_Navbar","react_default","a","createElement","Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","token","handleClick","bind","assertThisInitialized","handleChange","_this2","axios","post","then","response","setState","data","Token","setDatainLocalStorage","catch","error","console","log","Details","localStorage","setItem","JSON","stringify","event","target","value","Container","Row","Col","Form","method","action","className","Group","as","controlId","Label","column","sm","Control","onChange","name","type","placeholder","readOnly","defaultValue","Button","onClick","variant","react_router","to","pathname","Component","App","Components_Login","Chat","props","mySocketID","messageFromInput","endpoint","messages","ConnectedUsers","openChat","CurrentUserToChatWIth","joinChat","sendMessage","handleMessage","openChatWith","scrollToBottom","socket","io","on","message","user","alert","concat","toConsumableArray","connections","emit","messagesEnd","scrollTop","scrollHeight","_this3","chatWith","chatWithName","myMessage","inputMessage","setTimeout","userToChetWith","socketid","me","_this4","onlineUserChat","background","color","map","index","key","style","ref","el","InputGroup","FormControl","onKeyPress","Append","ReactDOM","render","react_router_dom","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c685e3b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport '../Css/Navbar.css';\r\n\r\nexport default function(){\r\n    return(\r\n    \r\n            <h1>Chat Application - CodeOasis </h1>\r\n      \r\n    )\r\n}","import React, {Component} from 'react';\r\nimport '../Css/Login.css'\r\nimport {Form, Col, Row, Container, Button} from 'react-bootstrap';\r\nimport {Redirect} from 'react-router-dom';\r\nimport axios from 'axios'\r\n\r\nclass Login extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            username: '',\r\n            token: ''\r\n        }\r\n        this.handleClick = this\r\n            .handleClick\r\n            .bind(this)\r\n        this.handleChange = this\r\n            .handleChange\r\n            .bind(this)\r\n    }\r\n\r\n    handleClick() {\r\n\r\n        axios\r\n            .post('/users', {username: this.state.username})\r\n            .then((response) => this.setState({\r\n                token: response.data.Token,\r\n                username: response.data.username\r\n            }, this.setDatainLocalStorage(response)))\r\n            .catch(error => console.log(error));\r\n\r\n    }\r\n\r\n    setDatainLocalStorage(response) {\r\n        if (response.data.Token) {\r\n            const Details = {\r\n                username: this.state.username\r\n            };\r\n            localStorage.setItem('userdetails', JSON.stringify(Details));\r\n        }\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({username: event.target.value});\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Container>\r\n                <Row>\r\n                    <h5>{this.state.token}</h5>\r\n                    <Col>\r\n                        <Form method=\"POST\" action=\"http://localhost:8080/user\" className=\"LoginForm\">\r\n                            <Form.Group as={Row} controlId=\"formPlaintextEmail\">\r\n                                <Form.Label column sm=\"2\"></Form.Label>\r\n                                <Col sm=\"10\">\r\n                                    <Form.Control\r\n                                        onChange={this.handleChange}\r\n                                        name=\"username\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"User\"/>\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextPassword\">\r\n                                <Form.Label column sm=\"2\"></Form.Label>\r\n                                <Col sm=\"10\">\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        placeholder=\"Password\"\r\n                                        readOnly\r\n                                        defaultValue=\"123456\"/>\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Button onClick={this.handleClick} variant=\"dark\">Login</Button>\r\n                            {this.state.token\r\n                                ? <Redirect\r\n                                        to={{\r\n                                        pathname: `/Chat`,\r\n                                        state: {\r\n                                            username: this.state.username\r\n                                        }\r\n                                    }}/>\r\n                                : null}\r\n                        </Form>\r\n\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\n\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Login from './Components/Login';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Navbar></Navbar>\n            <Login></Login>\n        </div>\n    );\n}\n\nexport default App;\n","import React, {Component} from 'react';\r\nimport '../Css/Chat.css';\r\nimport {\r\n    Col,\r\n    Row,\r\n    Container,\r\n    FormControl,\r\n    InputGroup,\r\n    Button\r\n} from 'react-bootstrap';\r\nimport io from 'socket.io-client';\r\n\r\nclass Chat extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: props.location.state.username,\r\n            mySocketID: '',\r\n            messageFromInput: '',\r\n            endpoint: \"http://localhost:8080/\",\r\n            messages: [],\r\n            placeholder: 'Write message here..',\r\n            ConnectedUsers: [],\r\n            openChat: false,\r\n            CurrentUserToChatWIth: ''\r\n        }\r\n\r\n        // function to handle data\r\n        this.joinChat = this\r\n            .joinChat\r\n            .bind(this);\r\n        this.sendMessage = this\r\n            .sendMessage\r\n            .bind(this);\r\n        this.handleMessage = this\r\n            .handleMessage\r\n            .bind(this);\r\n        this.openChatWith = this\r\n            .openChatWith\r\n            .bind(this);\r\n        this.scrollToBottom = this\r\n            .scrollToBottom\r\n            .bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // open socket with server\r\n        this.socket = io();\r\n\r\n        // call to emit that i'm joined to chat!\r\n        this.joinChat();\r\n\r\n        // handle incoming messages and checks how send it to me\r\n        this\r\n            .socket\r\n            .on('message', message => {\r\n                if (message.user !== this.state.CurrentUserToChatWIth.username || this.state.CurrentUserToChatWIth.username === '') {\r\n                    alert(message.user + \" want to talk with you..\")\r\n                } else {\r\n                    this.setState({\r\n                        messages: [\r\n                            ...this.state.messages,\r\n                            message\r\n                        ]\r\n                    });\r\n\r\n                }\r\n\r\n            });\r\n\r\n        // get all connected users.\r\n        this\r\n            .socket\r\n            .on('connections', connections => {\r\n                this.setState({ConnectedUsers: connections});\r\n            });\r\n\r\n    }\r\n\r\n    // emit that i'm joined to chat!\r\n    joinChat() {\r\n        this\r\n            .socket\r\n            .emit('join', {user: this.state.username})\r\n    }\r\n\r\n    // scroll the chat down\r\n    scrollToBottom() {\r\n        this.messagesEnd.scrollTop = this.messagesEnd.scrollHeight;\r\n    }\r\n\r\n    sendMessage() {\r\n\r\n        if (this.state.messageFromInput !== '') {\r\n            // emit the message to user that i click on him with message\r\n            this\r\n                .socket\r\n                .emit('message', {\r\n                    chatWith: this.state.CurrentUserToChatWIth,\r\n                    chatWithName: this.state.username,\r\n                    message: this.state.messageFromInput\r\n                });\r\n            // push my message to array to displat them in chat\r\n            const myMessage = {\r\n                user: this.state.username,\r\n                message: this.state.messageFromInput\r\n            };\r\n            this.setState({\r\n                messages: [\r\n                    ...this.state.messages,\r\n                    myMessage\r\n                ]\r\n            });\r\n\r\n            this.scrollToBottom();\r\n\r\n            // clear the input\r\n            this.setState({messageFromInput: ''});\r\n            this.inputMessage.value = '';\r\n        } else {\r\n            // checks if user want to send message to himself\r\n            this.setState({placeholder: 'Cannot send empty message !'})\r\n            setTimeout(() => {\r\n                this.setState({placeholder: 'Write message here..'})\r\n            }, 2000)\r\n        }\r\n\r\n    }\r\n\r\n    // function that hadle the user that i want to talk with him\r\n    openChatWith(userToChetWith) {\r\n        // clear the messages after i changing user to talk with him\r\n        this.setState({messages: []})\r\n        if (userToChetWith.username === this.state.username) {\r\n            alert('You cannot talk with yourself...')\r\n\r\n        } else {\r\n            // changes in state the current user & aemit him message\r\n            this.setState({CurrentUserToChatWIth: userToChetWith});\r\n            this\r\n                .socket\r\n                .emit('openChatWith', {\r\n                    chatWith: userToChetWith.socketid,\r\n                    me: this.state.username\r\n                });\r\n            this.setState({openChat: true});\r\n        }\r\n\r\n    }\r\n\r\n    // handle the message input\r\n    handleMessage(event) {\r\n        this.setState({messageFromInput: event.target.value});\r\n    }\r\n    render() {\r\n\r\n        // some style to conline users\r\n        const onlineUserChat = {\r\n            background: '#333333e1',\r\n            color: 'white'\r\n        }\r\n\r\n        // run on messages and display them in chat\r\n        const messages = this\r\n            .state\r\n            .messages\r\n            .map((message, index) => {\r\n                return <li className=\"allMessages\" key={index}>\r\n                    <b>\r\n                        {this.state.username === message.user\r\n                            ? <h3 className=\"MeinChat\">Me</h3>\r\n                            : message.user}\r\n                        :\r\n                    </b>{message.message}\r\n                    <hr></hr>\r\n                </li>\r\n            })\r\n\r\n        // run on connected users and display them\r\n        const ConnectedUsers = this\r\n            .state\r\n            .ConnectedUsers\r\n            .map((user, index) => {\r\n                return <h5\r\n                    style={this.state.CurrentUserToChatWIth.username === user.username\r\n                    ? onlineUserChat\r\n                    : {}}\r\n                    className=\"allConnectedUsers\"\r\n                    key={index}>\r\n                    <b onClick={() => this.openChatWith(user)}>{this.state.username === user.username\r\n                            ? 'Me'\r\n                            : user.username}</b>\r\n                </h5>\r\n            })\r\n\r\n        return (\r\n\r\n            <div>\r\n                <h2 className=\"ChatHeader\">Chat\r\n                </h2>\r\n\r\n                <Container>\r\n                    <Row>\r\n\r\n                        <Col sm={8} className=\"MainChat\">\r\n                            <h3 className=\"wellcomeUserStyle\">Wellcome..\r\n                                <b>{this.state.username}</b>\r\n                            </h3>\r\n                            <hr></hr>\r\n                            <div\r\n                                ref={(el) => {\r\n                                this.messagesEnd = el;\r\n                            }}\r\n                                className=\"ChatMessages\">\r\n                                {messages}\r\n                            </div>\r\n\r\n                            {this.state.openChat\r\n                                ? <InputGroup onChange={this.handleMessage} className=\"mb-3\">\r\n\r\n                                        <FormControl\r\n                                            ref={el => this.inputMessage = el}\r\n                                            placeholder={this.state.placeholder}\r\n                                            onKeyPress={event => {\r\n                                            if (event.key === 'Enter') {\r\n                                                this.sendMessage()\r\n                                            }\r\n                                        }}/>\r\n\r\n                                        <InputGroup.Append></InputGroup.Append>\r\n                                    </InputGroup>\r\n\r\n                                : null\r\n}\r\n\r\n                        </Col>\r\n\r\n                        <Col sm={4}>\r\n                            <h5 className=\"OnlineUsers\">Online Users</h5>\r\n                            {ConnectedUsers}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Route from './Routes'\n\nReactDOM.render(\n    <Route/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls. Learn\n// more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport {BrowserRouter, Route ,Switch} from 'react-router-dom'\r\n\r\nimport App from '../App';\r\nimport Chat from '../Components/Chat';\r\n\r\n\r\nexport default () => \r\n  (\r\n    <BrowserRouter>\r\n    <Switch>\r\n     \r\n  <Route  path=\"/\" component={App} exact ></Route>\r\n <Route  path=\"/Chat\" component={Chat} ></Route>\r\n <Route  path=\"*\" component={() => \"not found\"}></Route>\r\n   \r\n    </Switch>\r\n\r\n\r\n    </BrowserRouter>\r\n  );\r\n"],"sourceRoot":""}